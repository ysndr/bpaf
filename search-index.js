var searchIndex = JSON.parse('{\
"bpaf":{"doc":"Lightweight and flexible command line argument parser with …","t":[3,24,4,13,3,4,8,13,13,13,0,0,0,0,11,5,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,14,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,0,11,0,5,5,5,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,0,0,0,0,0,0,0,0,0,5,5,5,5,3,3,3,3,3,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,5,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,2,2,3,2,3,3,2,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Args","Bpaf","CompleteDecor","HiddenGroup","OptionParser","ParseFailure","Parser","Stderr","Stdout","VisibleGroup","_applicative","_combinatoric_tutorial","_derive_tutorial","_unusual","adjacent","any","anywhere","batteries","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check_invariants","clone","clone","clone","clone_into","clone_into","clone_into","command","command","complete","complete_style","construct","descr","env","fail","fallback","fallback_with","fmt","fmt","fmt","footer","from","from","from","from","from","from","from","from","group_help","guard","header","hide","hide_usage","into","into","into","into","is_comp","long","many","map","optional","params","parse","parsers","positional","pure","pure_with","run","run_inner","set_comp","short","some","to_options","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unwrap_stderr","unwrap_stdout","usage","version","0","0","0","0","cargohelper","chaining","dd","find","multi_value","multi_value_plus","optional_pos","struct_group","xorg","cargo_helper","toggle_flag","verbose_and_quiet_by_number","verbose_by_slice","NamedArg","ParseAny","ParseArgument","ParseCommand","ParsePositional","adjacent","any","argument","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","command","env","env","flag","fmt","from","from","from","from","from","help","help","help","help","into","into","into","into","into","long","long","long","positional","req_flag","short","short","short","strict","switch","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","NamedArg","ParseArgument","ParseBox","ParseCommand","ParseMany","ParseOptional","ParsePositional","ParseSome","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","catch","catch","catch","from","from","from","from","inner","into","into","into","into","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":["bpaf","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bpaf::CompleteDecor","","bpaf::ParseFailure","","bpaf::_unusual","","","","","","","","","bpaf::batteries","","","","bpaf::params","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bpaf::parsers","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["All currently present command line parameters, use it for …","Derive macro for bpaf command line parser","Various complete options decorations","Group items according to this group","Ready to run <code>Parser</code> with additional information attached","Unsuccessful command line parsing outcome, use it for unit …","Simple or composed argument parser","Print this to stderr and exit with failure code","Print this to stdout and exit with success code","Group items according to this group but also show the …","Applicative functors? What is it about?","Using the library in combinatoric style","Using the library in derive style","Some of the more unusual examples","Automagically restrict the inner parser scope to accept …","Take next unconsumed item on the command line as raw <code>String</code>…","Parse anywhere","Batteries included - helpful parsers that use only public …","","","","","","","","","Check the invariants <code>bpaf</code> relies on for normal operations","","","","","","","Subcommand parser","Turn <code>OptionParser</code> into subcommand parser","Dynamic shell completion","Add extra annotations to completion information","Compose several parsers to produce a single result","Set the description field","Environment variable fallback","Fail with a fixed error message","Use this value as default if value isn’t present on a …","Use value produced by this function as default if value isn…","","","","Set the footer field","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Attach help message to a complex parser","Validate or fail with a message","Set the header field","Ignore this parser during any sort of help generation","Ignore this parser when generating usage line","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Check if parser performs autocompletion","A flag/switch/argument that has a long name","Consume zero or more items from a command line and collect …","Apply a pure transformation to a contained value","Turn a required argument into optional one","Tools to define primitive parsers","Apply a failing transformation to a contained value","This module exposes parsers that accept further …","Positional argument in utf8 (<code>String</code>) encoding","Wrap a value into a <code>Parser</code>","Wrap a calculated value into a <code>Parser</code>","Execute the <code>OptionParser</code>, extract a parsed value or print …","Execute the <code>OptionParser</code> and produce a values for unit …","enable completions with custom output revision style","A flag/switch/argument that has a short name","Consume one or more items from a command line","Transform <code>Parser</code> into <code>OptionParser</code> to attach metadata and …","","","","","","","","","","","","","","","","Returns the contained <code>stderr</code> values - for unit tests","Returns the contained <code>stdout</code> values - for unit tests","Set custom usage field","Set the version field.","","","","","Implementing cargo commands","Command chaining: <code>setup.py sdist bdist</code>","<code>dd(1)</code>: <code>dd if=/dev/zero of=/dev/null bs=1000</code>","<code>find(1)</code>: <code>find -exec commands -flags terminated by \\\\;</code>","Multi-value arguments: <code>--foo ARG1 ARG2 ARG3</code>","Multi-value arguments with optional flags: …","Skipping optional positional items if parsing or …","Structure groups: …","<code>Xorg(1)</code>: <code>Xorg +xinerama +extension name</code>","Strip a command name if present at the front when used as …","Pick last passed value between two different flags","<code>--verbose</code> and <code>--quiet</code> flags with results encoded as number","<code>--verbose</code> and <code>--quiet</code> flags with results choosen from a …","A named thing used to create <code>flag</code>, <code>switch</code> or <code>argument</code>","Parse the next available item on a command line with no …","Parser for a named argument, created with <code>argument</code>.","Builder structure for the <code>command</code>","Parse a positional item, created with <code>positional</code>","Restrict parsed arguments to have both flag and a value in …","Take next unconsumed item on the command line as raw <code>String</code>…","Argument","","","","","","","","","","","","","","","","","Subcommand parser","Environment variable fallback","Environment variable fallback","Flag with custom present/absent values","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Add a brief description to a command","Add a help message to <code>any</code> parser.","Add a help message to a flag/switch/argument","Add a help message to a <code>positional</code> parser","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","A flag/switch/argument that has a long name","Add a custom hidden long alias for a command","Add a long name to a flag/switch/argument","Positional argument in utf8 (<code>String</code>) encoding","Required flag with custom value","A flag/switch/argument that has a short name","Add a custom short alias for a command","Add a short name to a flag/switch/argument","Changes positional parser to be “strict” positional","Simple boolean flag","","","","","","","","","","","","","","","","","","","","","Create boxed parser","","Apply inner parser several times and collect results into …","Apply inner parser, return a value in <code>Some</code> if items …","","Apply inner parser several times and collect results into …","","","","","","","","","Handle parse failures","Handle parse failures","Handle parse failures","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Boxed inner parser","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","",""],"i":[0,0,0,6,0,0,0,7,7,6,0,0,0,0,21,0,21,0,3,5,6,7,3,5,6,7,3,5,6,7,5,6,7,0,3,21,21,0,3,0,0,21,21,5,6,7,3,3,5,5,5,5,5,6,7,21,21,3,21,21,3,5,6,7,5,0,21,21,21,0,21,0,0,0,0,3,3,5,0,21,21,5,6,7,3,5,6,7,3,5,6,7,3,5,6,7,7,7,3,3,28,29,30,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,9,8,2,9,25,14,8,2,9,25,14,9,25,14,9,25,14,0,0,9,9,9,8,2,9,25,14,8,2,9,14,8,2,9,25,14,0,8,9,0,9,0,8,9,14,9,9,25,14,8,2,9,25,14,8,2,9,25,14,8,2,9,25,14,0,0,0,0,0,0,0,0,18,13,12,32,18,13,12,32,18,13,12,18,13,12,32,32,18,13,12,32,18,13,12,32,18,13,12,32,18,13,12,32],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[3,4]],[5,5],[6,6],[7,7],[[]],[[]],[[]],[[1,3],8],[[3,1],8],0,0,0,[[3,1],3],[1,9],0,0,0,[[5,10],11],[[6,10],11],[[7,10],11],[[3,1],3],[[]],[[],5],[[]],[[],5],[[],5],[[],5],[[]],[[]],0,0,[[3,1],3],0,0,[[]],[[]],[[]],[[]],[5,4],[1,9],[[],12],0,[[],13],0,0,0,[1,14],0,0,[3],[[3,5],[[15,[7]]]],[[5,16],5],[17,9],[1,18],[[],3],[[]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],19],[[],19],[[],19],[[],19],[7,20],[7,20],[[3,1],3],[[3,1],3],0,0,0,0,0,0,0,0,0,0,0,0,0,[1,21],[[9,22,9,22],[[21,[[23,[22]]]]]],[[24,24,24],[[21,[24]]]],[16,[[21,[22]]]],0,0,0,0,0,[25,25],[1,2],[[9,1],25],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9,9],[[[25,[26]]],[[25,[26]]]],[[[14,[26]]],[[14,[26]]]],[[]],[[]],[[]],[[1,3],8],[1,9],[[9,1],9],[9,21],[[9,10],11],[[]],[[]],[[]],[[]],[[]],[8,8],[[2,[27,[20]]],2],[9,9],[14,14],[[]],[[]],[[]],[[]],[[]],[1,9],[[8,1],8],[[9,1],9],[1,14],[9,21],[17,9],[[8,17],8],[[9,17],9],[14,14],[9,[[21,[4]]]],[[]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],19],[[],19],[[],19],[[],19],[[],19],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[18,18],[13,13],[12,12],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],19],[[],19],[[],19],[[],19]],"p":[[15,"str"],[3,"ParseAny"],[3,"OptionParser"],[15,"bool"],[3,"Args"],[4,"CompleteDecor"],[4,"ParseFailure"],[3,"ParseCommand"],[3,"NamedArg"],[3,"Formatter"],[6,"Result"],[3,"ParseMany"],[3,"ParseOptional"],[3,"ParsePositional"],[4,"Result"],[15,"usize"],[15,"char"],[3,"ParseSome"],[3,"TypeId"],[3,"String"],[8,"Parser"],[8,"Copy"],[4,"Option"],[15,"isize"],[3,"ParseArgument"],[8,"Clone"],[8,"Into"],[13,"HiddenGroup"],[13,"VisibleGroup"],[13,"Stdout"],[13,"Stderr"],[3,"ParseBox"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
